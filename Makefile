# MAKEFILE for simple-go-helloworld

NAME=simple-go-helloworld

# os name and arch
OS_NAME=$(shell go env GOOS)
OS_ARCH=$(shell go env GOARCH)

# TODO: see if we can get docker working of this
# can even copy in the Makefile, and have it build off itself.
BIN_ROOT=$(PWD)/.bin

# binary output name
BINARY=$(NAME)
ifeq ($(OS_NAME),windows)
	BINARY=$(NAME).exe
endif
BINARY_WHICH=$(shell command -v $(BINARY))

BINARY_NATIVE=$(NAME)_$(OS_NAME)_$(OS_ARCH)
ifeq ($(OS_NAME),windows)
	BINARY_NATIVE=$(NAME)_$(OS_NAME)_$(OS_ARCH).exe
endif
BINARY_NATIVE_WHICH=$(shell command -v $(BINARY_NATIVE))

VERSION=`cat version`
COMMIT=`git rev-parse --short HEAD || echo "unknown"`

LDFLAGS=-ldflags "-X simple-go-helloworld/release.Version=${VERSION} -X simple-go-helloworld/release.Commit=${COMMIT}"

export PATH:=$(PATH):$(BIN_ROOT)
print:
	@echo ""
	@echo "NAME:                   $(NAME)"
	@echo ""
	@echo "OS_NAME:                $(OS_NAME)"
	@echo "OS_ARCH:                $(OS_ARCH)"
	@echo ""
	@echo "BIN_ROOT:               $(BIN_ROOT)"
	@echo ""
	@echo "BINARY:                 $(BINARY)"
	@echo "BINARY_WHICH:           $(BINARY_WHICH)"
	@echo "BINARY_NATIVE:          $(BINARY_NATIVE)"
	@echo "BINARY_NATIVE_WHICH:    $(BINARY_NATIVE_WHICH)"
	@echo ""
	@echo "VERSION:                $(VERSION)"
	@echo "COMMIT:                 $(COMMIT)"
	@echo "LDFLAGS:                $(LDFLAGS)"
	@echo ""

.DEFAULT_GOAL: print

# define phony targets
.PHONY: clean install build-native build-linux docker-container docker-container-clear docker-image test dep

# build the binary and deploy a container with it
all: build-native build-linux docker

# build a clean image an container
docker: docker-image-clean docker-image docker-container

bin-init:
	mkdir -p $(BIN_ROOT)
bin-del:
	rm -rf $(BIN_ROOT)


build-all: bin-init build-native build-linux
build-native: bin-init clean dep
	# for devs
	CGO_ENABLED=0 GOOS=$(OS_NAME) GOARCH=$(OS_ARCH) go build ${LDFLAGS} -a -o $(BIN_ROOT)/${BINARY_NATIVE} .
build-linux: bin-init clean dep
	# for docker
	CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build ${LDFLAGS} -a -o $(BIN_ROOT)/${BINARY} .

# install compiled dependencies in $GOPATH/pkg and put the binary in $GOPATH/bin
install: clean dep
	go install ${LDFLAGS} ./...

run:
	$(BINARY_WHICH)
run-native:
	$(BINARY_NATIVE)

# execute all tests
test: dep
	go test ./...
dep:
	go get -u github.com/stretchr/testify/assert

# clear binaries generated by install or build targets
clean:
	if [ -f ${BINARY_WHICH} ] ; then rm -f ${BINARY} ; rm -f ${BINARY_WHICH} ; fi

	if [ -f ${BINARY_NATIVE} ] ; then rm -f ${BINARY_NATIVE} ; rm -f ${BINARY_NATIVE_WHICH} ; fi


# DOCKER TARGETS

# create a docker image to run the binary
docker-image:
	docker build --tag ${BINARY} --tag ${BINARY}:${VERSION} .
# create a container to run the binary.
docker-container:
	docker run -d --name ${BINARY} -p 80:80 ${BINARY}
# clean the containers
docker-container-clean:
	docker ps -a | grep ${BINARY} | tr -s ' ' | cut -d " " -f1 | while read c; do docker stop $$c; docker rm -v $$c; done
# clear docker images
docker-image-clean: docker-container-clean
	docker images | grep simple-go-helloworld | tr -s ' ' | cut -d " " -f2 | while read t; do docker rmi ${BINARY}:$$t; done
